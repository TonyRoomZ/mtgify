!function(){return function e(t,r,n){function s(o,a){if(!r[o]){if(!t[o]){var c="function"==typeof require&&require;if(!a&&c)return c(o,!0);if(i)return i(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var u=r[o]={exports:{}};t[o][0].call(u.exports,function(e){var r=t[o][1][e];return s(r||e)},u,u.exports,e,t,r,n)}return r[o].exports}for(var i="function"==typeof require&&require,o=0;o<n.length;o++)s(n[o]);return s}}()({1:[function(e,t,r){"use strict";const n=e("../lib/DeckList"),s=new class{constructor(){const e=this;e.lookupMultiverse=new Promise((t,r)=>{e.resolveMultiverse=(e=>t(e))}),e.lookupAllCards=new Promise((t,r)=>{e.resolveAllCards=(e=>t(e))}),e.baseUrl=window.location.pathname.includes("test")?`${window.location.href}/../../`:"http://autocard.mpaulweeks.com",fetch(`${e.baseUrl}/json/Multiverse.lower.json`).then(e=>e.json()).then(t=>e.resolveMultiverse(t)),fetch(`${e.baseUrl}/json/AllCards.lower.json`).then(e=>e.json()).then(t=>e.resolveAllCards(t))}normalizeCardName(e){return e.trim().toLowerCase()}performLookup(e,t){return e[this.normalizeCardName(t)]}getMultiverseId(e){const t=this;return t.lookupMultiverse.then(r=>t.performLookup(r,e))}getCard(e){const t=this;return t.lookupAllCards.then(r=>t.performLookup(r,e))}};class i extends HTMLElement{setupTextListener(e){const t=this;t._observer=new MutationObserver(function(){t._observer.disconnect(),e()}),t._observer.observe(t,{childList:!0})}}class o extends i{connectedCallback(){this.name=this.getAttribute("name"),this.innerHTML="";const e=`http://magiccards.info/query?q=${this.name}`,t=document.createElement("a");t.setAttribute("href",e),t.setAttribute("target","_blank"),t.innerHTML=this.name,this.appendChild(t),this.anchor=t,this.onLoad()}onLoad(){}}customElements.define("card-text",class extends o{}),customElements.define("card-image",class extends o{onLoad(){const e=this;s.getMultiverseId(e.name).then(t=>e.loadMultiverseId(t))}loadMultiverseId(e){if(this.mid=e,this.mid){const t=`http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=${e}&type=card`,r=document.createElement("img");r.setAttribute("src",t),r.setAttribute("alt",this.name),r.setAttribute("title",this.name),this.anchor.innerHTML="",this.anchor.appendChild(r),this.image=r}}}),customElements.define("card-list",class extends i{connectedCallback(){const e=this.getAttribute("src");this.renderText(e)}renderText(e){const t=this;t.innerHTML="loading deck list...",n.DeckListFromUrl(e,e=>s.getCard(e)).then(e=>{t.innerHTML="",e.forEach(e=>{t.innerHTML+=`<h3>${e.type}</h3>`,e.cards.forEach(e=>{t.innerHTML+=`<div>${e.quantity}x ${e.card.name}</div>`})})})}}),t.exports={}},{"../lib/DeckList":2}],2:[function(e,t,r){"use strict";const n=["Land","Creature","Artifact","Enchantment","Planeswalker","Instant","Sorcery"].reverse(),s=["Creature","Planeswalker","Artifact","Enchantment","Instant","Sorcery","Land"];class i{constructor(e,t){this.text=e,this.allCardsLookup=t}categorizeCardList(){const{text:e,allCardsLookup:t}=this,r={},s=[];return e.split("\n").forEach(e=>{const i=e.trim();if(0===i.length)return;const o=i.indexOf("x "),a=i.substring(0,o),c=i.substring(o+2),l=t(c).then(t=>{if(!t)return void console.log("failed to find card",e);let s=null;n.forEach(e=>{t.types.includes(e)&&(s=e)}),s&&(r[s]||(r[s]=[]),r[s].push({quantity:a,card:t}))});s.push(l)}),Promise.all(s).then(()=>r)}getDataPromise(){return this.categorizeCardList().then(e=>{const t=[];return s.forEach(r=>{e[r]&&t.push({type:r,cards:e[r]})}),t})}}t.exports={DeckList:i,DeckListFromUrl:function(e,t){return fetch(e).then(e=>e.text()).then(e=>new i(e,t).getDataPromise())}}},{}],3:[function(e,t,r){e("./AutoCard.js")},{"./AutoCard.js":1}]},{},[3]);